20200304
〜第3章〜

◆学習の目標
　・仮想環境上でRuby on RailsによるWebアプリケーション開発を進めていく

◆3章の目次
　・仮想環境を使う準備
　・仮想環境のディレクトリへ移動する
　・仮想環境を起動する（vagrant up）
　・仮想環境へSSH接続する
　・共有フォルダに移動する
　・Vagrantでの作業を終了するには

　・Ruby on Railsでの開発を始める
　　・Railsアプリのひな形を作成する（rails new）
　　・作成されたファイルを確認する
　　・Railsアプリのディレクトリ構成
　　・sample_appディレクトリへ移動する

　・Railsでページを表示する
　　・コントローラを作成する
　　・コントローラ内にアクションを追加する
　　・ルーティングを設定する
　　・Viewファイルを作成する

　・アプリケーションを起動する
　・起動したアプリケーションにアクセスする
　　・エラーが表示された場合は

　・確認問題

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
①仮想環境のディレクトリへ移動する
・ターミナル、コマンドプロンプトで操作するときは、どのディレクトリにいるのかがとても重要
　→ 現在どのディレクトリにいるのかを常に意識すること

移動方法
	$ cd Desktop/work/vagrant

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
②仮想環境を起動する
　仮想環境のあるvagrantディレクトリまで移動できている
　次にやることが仮想環境を起動するコマンドを実行する
起動方法
	$ vagrant up

起動できた場合：https://web-camp.online/uploads/contents/130/3.png
違う画面が表示された場合：https://web-camp.online/uploads/contents/130/4.png
すでにVagrantが起動している場合：https://web-camp.online/uploads/contents/130/5.png
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
③仮想環境へSSH接続する
　Vagrantが起動できても、まだ仮想環境とは接続できていない！
　SSH接続することでやっと仮想環境と接続できる

　◆SSH接続とは
　　・自身のPCから他のPC（今回は仮想環境）に安全に通信するための接続方法

　[やり方]
　・MacのSSH接続
	$vagrant ssh
　※パスワードを訊ねられたときは「vagrant」と入力してEnter！

　・Windowsはめんどくさい！　→ 調べて！
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
④共有フォルダに移動する
　仮想環境とのSSH接続ができたので、仮想環境上で開発を進めていく
　仮想環境は自分のPCでありながら、自分のPCではない
　自分のPCと仮想環境PCの間でファイルを共有できる場所が必要になる
　→ この場所を「共有フォルダ」という

　共有フォルダは、仮想環境内で作ったファイルを自分のPCから編集したり閲覧できるフォルダ
　自分のPCと仮想環境PCの両方で閲覧できる
　PC上の共有フォルダは、Vagrantfileのある場所にある
	$ cd /home/vagrant/work
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
⑤Vagrantの作業を終了するには
　・仮想環境からのログアウト
	$ exit
　・仮想環境のシャットダウン
	$ vagrant halt
　　ログアウトしても、Vagrantは起動したまま
　　→ PCのメモリ消費や負荷が木になるときはVagrantをシャットダウンしよう
　・仮想環境の休止
	$ vagrant suspend
　　休止した場合は、仮想環境を起動する(vagrant up)ところからやり直すこと
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
Ruby on Railsでの開発を始める
仮想環境の起動、接続、共有フォルダへの移動ができてやっとRuby on Railsでの開発を始められる


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
①Railsアプリのひな形を作成する（rails new）
　・新規アプリケーションを作成するには下記のコマンドを実行する
	$ rails new アプリケーション名
　・アプリケーションを削除するには
	$ rm -rf アプリケーション名
　　rm：remove = ファイルやフォルダを削除するコマンド
　　-rfはコマンドオプションの1つ：「フォルダ内の全てのファイルとフォルダを削除する」
　　→ remove recursively force
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
②作成されたファイルを確認する
　①のコマンドが正しく実行されると数多くのフォルダやファイルが作成される
　→ これでひな形が作られたことを意味する

Webアプリケーションを作成するには、このように数多くのフォルダやファイルが必要
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
③Railsアプリのディレクトリ構成
　●app：実際に開発するRailsアプリケーションの主要ファイルが保存されている
　　・assets：アプリケーションで使うCSSやJavaScript、画像ファイルが保存されている
　　・controllers：MVCにおけるコントローラのファイルを保存している
　　・models：MVCにおけるモデルのファイルを保存している
　　・views：MVCにおけるビューのファイルを保存している
　　　↑ ~.html.erbと名のつくファイル

　●bin：Railsで使用されるコマンドの設定ファイルが入っている
　　　　→ 中のファイルに変更を加えることはほとんどない

　●congig：Railsアプリケーションに関する設定ファイルが入っている
　　・database.yml：データベースへの接続設定を記述するファイル
　　・routes.rb：ルーティングを設定するファイル　　　ルーティング？
　　・initializers：初期化ファイルを保存

　●db：データベースに関する設定ファイルを保存している
　　・migrate：マイグレーションファイルを保存している
　　　　　　　　→ データベース上のテーブルを作成・更新するために必要なファイル

　●public：サーバーにデプロイ（アプリケーションの設置）した後、Web上に公開されるファイルを保存している

　●test：アプリケーションのテストにkじゃんするファイルを保存している


Railsの画面表示に必要なファイルは下記のフォルダ
・configフォルダ内の「routes.rb」ファイル
・controllersフォルダ内のファイル
・viewsフォルダ内のファイル
→ 今後の作業では、このフォルダ内のファイルを中心に編集することとなる

上記の各役割
・routes.rb：RULとコントローラ（アクション）を紐付ける
・controllers：ユーザからのリクエストを受け付ける司令塔
・views：Webページに表示される内容



ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
④Sample_appディレクトリへ移動する
	$ cd sample_app
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
①Railsでページを表示する
　Railsでページを表示するには、まず、Controllerを作成する必要がある

〜補足〜
・ Model：アプリケーション固有のデータを扱う部分
・ View：PCの画面（ユーザインタフェース）に関わる部分
・ Controller：ModelやViewを統合的に制御する部分

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
②Controllerを作成する
　コントローラの役割は・・・
　・Modelとやり取りをする
　・Viewに渡すインスタンス変数を定義する
　・表示するViewファイルを指定する
	https://wals.s3.amazonaws.com/uploads/wals2_content_img/128/controller_rails.png

　今回は「homes」という名のコントローラを作成する
	$ rails g controller コントローラ名　→ $ rails g controller homes
　rails g = rails generateの略

　◆コントローラの命名規則
　　・コントローラ名：複数形、先頭は英小文字		homes
　　・コントローラのクラス名：複数形、戦闘は英大文字	HomesController
　　・ファイル名：複数形、戦闘は英小文字			homes_controller.rb

　◆コントローラの作成を間違えた場合は・・・
	$ rails d controller ファイル名
　　rails d = rails destroy
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
③コントローラ内にアクションを追加する
　action（アクション）は、コントローラに定義されている処理内容
　コントローラは全体を統括して制御しているのに対し、アクションは制御内の一つ一つの処理を担当している

　◆コントローラファイルを開く
　　homesコントローラ内のファイル(homes_controller.rbファイル)を開く
　　https://wals.s3-ap-northeast-1.amazonaws.com/uploads/contents/130/23.png

　◆topアクションを定義する
	def top

	end

上記でコントローラの準備は完了

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
④ルーティングを設定する
　routing（ルーティング）では、ユーザが特定のURLにアクセスした時に、どのコントローラのどのアクションに処理を振り分けるかを定義する
　routingはURLとアクションを結びつける役目をしている

　◆ルーティングの記述場所
　　configフォルダ内のroutes.rbファイルに記述する
	HTTPメソッド 'URL' => 'コントローラ#アクション'

　◆HTTPメソッドとは？
　　・HTTP：Hypertext Transfer Protocol ユーザーが行いたい処理をサーバーに伝える役目
　　・HTTPメソッドの代表的なメソッドは3種類
　　　①GET：リソースの取得
　　　　ブラウザからサーバーへURLを送信し、Webページを取得する
　　　　単にWebサイトを閲覧する際は、GETメソッドが使われる
　　　②POST：リソースの更新、リソースへのデータ追加など
　　　　ブラウザからサーバーへ、URL以外のデータも送信（POST）して処理を命令する
　　　　会員情報の登録、記事投稿など、サーバーに情報を送信する際に使用する
　　　③DELETE：リソースの削除
　　　　ブラウザからサーバーへ、URL以外のデータ削除のための情報も送信して処理を命令する
　　　　会員情報の削除、記事削除など、情報を削除する際に使用する
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
⑤ルーティングを記述する
　・今回は「画面を表示したい」のでGETメソッドを使う
　・どのURLにアクセスした時に、どのコントローラのどのアクションを呼び出すかを設定する
　・routes.rbファイルに以下のように記述
	Rails.application.routes.draw do
		get 'top' => 'homes#top'
	end
　　→URL「top」にアクセスした時に、homesコントローラのtopアクションが呼び出されるように設定


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
⑥Viewファイルを作成する
　ビューファイルは作成できる場所が決まっている
　→ app/views/コントローラ名



ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
アプリケーションを起動する
①railsサーバを起動する
　アプリケーションを動かすには、サーバを起動している必要がある
　→ Railsには、開発環境用に用意されているサーバ(Puma)があるので、これを起動して動作を確認する
　
　起動方法は・・・
	$ rails server -b 0.0.0.0
もしくは
	$ rails s -b 0.0.0.0
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
②起動したアプリケーションにアクセスする
　サーバが正しく起動すると、アプリケーションにアクセスできるようになる
　URLはroutes.rbで設定したURL(top)を追加したものが最終的なURLとなる
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー



Webアプリケーション1ページを表示する手順まとめ
①Railsアプリケーションの雛形を作成する
②作成したフォルダへ移動する
③コントローラーを作成する
④アクションを定義する
⑤ルーティンを設定する
⑥ビューファイルを作成する
⑦アプリケーションサーバを起動する
⑧URLにアクセスする

上記の内容はRailsの基礎知識なので、必ず理解すること